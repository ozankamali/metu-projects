# Name = OZAN KAMALI
# Student ID = 2521680

	.pos 0
	irmovq stack, %rsp
	call main
	halt

main:	
  irmovq head, %rdi
	call sort
	ret
 
sort: 
  pushq %r12
  rrmovq %rdi, %r14
  andq %r14, %r14           # head != NULL  
  je returnh                # return head
  mrmovq 8(%rdi), %r14 
  andq %r14, %r14           # head->next != NULL
  je returnh                # return head
  rrmovq %rdi, %r8          # min = head 
  irmovq $0, %r9            # prevmin = NULL
  rrmovq %rdi, %r10         # curr = head -- for( curr = head; 

for:
  mrmovq 8(%r10), %r14       
  andq %r14, %r14           # curr->next != NULL
  je swap
  mrmovq (%r8), %r13        # min->data
  mrmovq 8(%r10), %r14      # curr->next
  mrmovq (%r14), %r14       # curr->next->data
  cmpq %r14, %r13           # curr->next->data < min->data
  jg if
  jmp update
  
if: 
  mrmovq 8(%r10), %r14      # curr->next
  rrmovq %r14, %r8          # min = curr->next
  rrmovq %r10, %r9          # prevmin = curr
  
update:
  mrmovq 8(%r10), %r10      # curr = curr->next
  jmp for
 
swap:
  cmpq %r8, %rdi            # min != head
  je rec
  mrmovq 8(%rdi), %r14      # temp = head->next 
  mrmovq 8(%r8), %r13       # min -> next
  rmmovq %r13, 8(%rdi)      # head->next = min->next
  cmpq %r14, %r8            # temp == min
  jne else
  rmmovq %rdi, 8(%r8)       # min ->next = head
  jmp def
  
else:
  rmmovq %r14, 8(%r8)       # min->next = temp
  rmmovq %rdi, 8(%r9)       # prevmin->next = head

def:
  rrmovq %r8, %rdi          # head = min
  
rec:
  rrmovq %rdi, %r12
  mrmovq 8(%rdi), %rdi
  call sort
  rrmovq %r12, %rdi                             
  rmmovq %rax, 8(%rdi)
  
 
returnh: 
  popq %r12
  rrmovq %rdi, %rax         # head -> rax 
  ret

 	.pos 0x200
head:
	.quad 17
	.quad node1
node1:
	.quad 24
	.quad node2
node2:
	.quad 6
	.quad node3
node3:
	.quad 11
	.quad node4
node4:
	.quad 4
	.quad node5
node5:
	.quad 5
	.quad node6
node6:
	.quad 3
	.quad node7
node7:
	.quad 40
	.quad node8
node8:
	.quad 19
	.quad node9
node9:
	.quad 52
	.quad node10
node10:
	.quad 8
	.quad 0 # Remember that 0 is null.


	.pos 0x500
stack:
